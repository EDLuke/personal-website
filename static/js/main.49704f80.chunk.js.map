{"version":3,"sources":["components/IntroPage.js","components/TItlePage.js","App.js","serviceWorker.js","index.js"],"names":["IntroPage","className","style","marginLeft","position","bottom","left","display","fontSize","fontWeight","letterSpacing","lineHeight","color","backgroundColor","paddingTop","paddingBottom","paddingLeft","paddingRight","align","Container","href","icon","faLinkedin","faGithub","faInstagram","React","Component","TitlePage","height","justifyContent","alignItems","Button","outline","borderRadius","fontFamily","ReactGA","initialize","App","Helmet","property","content","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUA0DeA,E,iLAjDP,OAAQ,yBAAKC,UAAU,8BACX,6BACI,yBACIA,UAAU,eACVC,MAAO,CACHC,WAAY,OACZC,SAAU,WACVC,OAAQ,OACRC,KAAM,MACNC,QAAS,iBAEb,wBACIL,MAAO,CACHM,SAAU,4DACVC,WAAY,IACZC,cAAe,MACfC,WAAY,6DACZC,MAAO,UACPC,gBAAiB,QACjBC,WAAY,MACZC,cAAe,MACfC,YAAa,MACbC,aAAc,QAXtB,eAgBJ,wBACIhB,UAAU,eACVC,MAAO,CACHM,SAAU,4DACVG,WAAY,8DACZC,MAAO,SAEXM,MAAM,UAPV,qBAUA,gCACI,kBAACC,EAAA,EAAD,KACI,uBAAGC,KAAK,2CAA0C,kBAAC,IAAD,CAAiBC,KAAMC,OACzE,uBAAGF,KAAK,6BAA4B,kBAAC,IAAD,CAAiBC,KAAME,OAC3D,uBAAGH,KAAK,uCAAsC,kBAAC,IAAD,CAAiBC,KAAMG,e,GA7C7EC,IAAMC,W,QC8BfC,E,iLA9BP,OAAO,kBAACR,EAAA,EAAD,CACCjB,MAAO,CACH0B,OAAO,OACPrB,QAAS,OACTsB,eAAgB,SAChBC,WAAY,WAEpB,yBAAK7B,UAAU,eACX,uBAAGmB,KAAK,sCACJ,kBAACW,EAAA,EAAD,CACIC,SAAO,EACP9B,MAAO,CACHM,SAAU,4DACVyB,aAAc,EACdnB,WAAY,OACZC,cAAe,OACfC,YAAa,OACbC,aAAc,OACdiB,WAAY,UAEhBtB,MAAM,aAXV,oB,GAXIa,IAAMC,W,cCK9BS,EAAQC,WADW,kB,IAwBJC,E,iLAlBP,OACI,yBAAKpC,UAAU,MAAMC,MAAO,CAAC0B,OAAS,UAClC,kBAACU,EAAA,OAAD,KACI,0BAAMC,SAAS,UAAUC,QAAQ,YACjC,0BAAMD,SAAS,WAAWC,QAAQ,sBAClC,0BAAMD,SAAS,iBAAiBC,QAAQ,iBACxC,0BAAMD,SAAS,WAAWC,QAAQ,gFAClC,0BAAMD,SAAS,SAASC,QAAQ,+BAChC,0BAAMC,KAAK,cAAcD,QAAQ,mCAErC,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAdEf,IAAMC,WCEJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.49704f80.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container} from \"reactstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faGithub, faInstagram, faLinkedin} from \"@fortawesome/free-brands-svg-icons\";\n\nclass IntroPage extends React.Component {\n\n    render() {\n\n        return  <div className=\"intro-background-component\">\n                    <div>\n                        <div\n                            className=\"unselectable\"\n                            style={{\n                                marginLeft: \"24px\",\n                                position: \"absolute\",\n                                bottom: \"24px\",\n                                left: \"0px\",\n                                display: \"inline-block\"\n                            }}>\n                            <h2\n                                style={{\n                                    fontSize: \"calc(32px + (26 - 14) * ((100vw - 300px) / (1600 - 300)))\",\n                                    fontWeight: 512,\n                                    letterSpacing: \"2px\",\n                                    lineHeight: \"calc(1.3em + (1.5 - 1.2) * ((100vw - 300px)/(1600 - 300)))\",\n                                    color: \"#222222\",\n                                    backgroundColor: \"white\",\n                                    paddingTop: \"2px\",\n                                    paddingBottom: \"2px\",\n                                    paddingLeft: \"8px\",\n                                    paddingRight: \"8px\"\n                                }}>\n                                LUKE ZHANG\n                            </h2>\n                        </div>\n                        <h1\n                            className=\"unselectable\"\n                            style={{\n                                fontSize: \"calc(80px + (26 - 14) * ((100vw - 300px) / (1600 - 300)))\",\n                                lineHeight: \"calc(1.05em + (1.5 - 1.2) * ((100vw - 300px)/(1600 - 300)))\",\n                                color: \"white\",\n                            }}\n                            align=\"center\">\n                            Random Asian Dude\n                        </h1>\n                        <footer>\n                            <Container>\n                                <a href=\"https://www.linkedin.com/in/luke-zhang/\"><FontAwesomeIcon icon={faLinkedin}/></a>\n                                <a href=\"https://github.com/EDLuke\"><FontAwesomeIcon icon={faGithub}/></a>\n                                <a href=\"https://www.instagram.com/ed_lukez/\"><FontAwesomeIcon icon={faInstagram}/></a>\n                            </Container>\n                        </footer>\n                    </div>\n                </div>\n    }\n}\n\nexport default IntroPage;","import React from \"react\";\nimport {Button, Container} from \"reactstrap\";\n\nclass TitlePage extends React.Component {\n    render() {\n        return <Container\n                style={{\n                    height:\"20vh\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\"\n                }}>\n            <div className=\"text-center\">\n                <a href=\"mailto:anything@randomasiandude.me\">\n                    <Button\n                        outline\n                        style={{\n                            fontSize: \"calc(20px + (26 - 14) * ((100vw - 300px) / (1600 - 300)))\",\n                            borderRadius: 0,\n                            paddingTop: \"12px\",\n                            paddingBottom: \"12px\",\n                            paddingLeft: \"24px\",\n                            paddingRight: \"24px\",\n                            fontFamily: \"Roboto\"\n                        }}\n                        color=\"secondary\"\n                    >\n                        got idea?\n                    </Button>\n                </a>\n            </div>\n        </Container>\n    }\n}\n\nexport default TitlePage;","import React from 'react';\nimport './App.css';\nimport IntroPage from \"./components/IntroPage\";\nimport TitlePage from \"./components/TItlePage\";\nimport {Helmet} from 'react-helmet';\nimport ReactGA from 'react-ga';\n\nconst trackingId = \"UA-158580757-1\";\nReactGA.initialize(trackingId);\n\nclass App extends React.Component  {\n\n    render() {\n        return (\n            <div className=\"App\" style={{height : '100vh'}}>\n                <Helmet>\n                    <meta property=\"og:type\" content=\"website\" />\n                    <meta property=\"og:title\" content=\"Random Asian Dude\"/>\n                    <meta property=\"og:description\" content=\"A bit random\"/>\n                    <meta property=\"og:image\" content=\"https://random-asian-dude-site.s3.us-east-2.amazonaws.com/assets/v0_1_2.png\"/>\n                    <meta property=\"og:url\" content=\"http://randomasiandude.me/\"/>\n                    <meta name=\"description\" content=\"A Random Asian Dude's Website\" />\n                </Helmet>\n                <IntroPage />\n                <TitlePage />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}